"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var mixins_1 = require("./mixins");
var normalizePath_1 = __importDefault(require("./normalizePath"));
var Component = (function () {
    function Component(xapi) {
        this.xapi = xapi;
        this.prefix = '';
    }
    Component.prototype.normalizePath = function (path) {
        var normalized = normalizePath_1.default(path);
        var prefix = this.prefix;
        return !prefix
            ? normalized
            : [prefix].concat(normalized);
    };
    return Component;
}());
var Config = (function (_super) {
    __extends(Config, _super);
    function Config(xapi) {
        var _this = _super.call(this) || this;
        _this.xapi = xapi;
        _this.prefix = 'Configuration';
        return _this;
    }
    return Config;
}(mixins_1.mix(Component, mixins_1.Listenable, mixins_1.Gettable, mixins_1.Settable)));
exports.Config = Config;
var Event = (function (_super) {
    __extends(Event, _super);
    function Event(xapi) {
        var _this = _super.call(this) || this;
        _this.xapi = xapi;
        _this.prefix = 'Event';
        return _this;
    }
    return Event;
}(mixins_1.mix(Component, mixins_1.Listenable)));
exports.Event = Event;
var Status = (function (_super) {
    __extends(Status, _super);
    function Status(xapi) {
        var _this = _super.call(this) || this;
        _this.xapi = xapi;
        _this.prefix = 'Status';
        return _this;
    }
    return Status;
}(mixins_1.mix(Component, mixins_1.Listenable, mixins_1.Gettable)));
exports.Status = Status;
