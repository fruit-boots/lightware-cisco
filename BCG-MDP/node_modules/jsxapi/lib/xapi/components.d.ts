import XAPI from '.';
import { Registration } from './feedback';
import { Gettable, Listenable, Settable } from './mixins';
import { Listener, Path } from './types';
declare class Component {
    readonly xapi: XAPI;
    prefix: string;
    constructor(xapi: XAPI);
    normalizePath(path: Path): (string | number)[];
}
declare const Config_base: any;
export declare class Config extends Config_base implements Component, Listenable, Gettable, Settable {
    readonly xapi: XAPI;
    prefix: string;
    normalizePath: (path: Path) => Array<string | number>;
    on: <T = any>(path: Path, listener: Listener<T>) => Registration;
    once: <T = any>(path: Path, listener: Listener<T>) => Registration;
    off: () => void;
    get: <T = any>(path: Path) => Promise<T>;
    set: (path: Path, value: number | string) => Promise<any>;
    constructor(xapi: XAPI);
}
declare const Event_base: any;
export declare class Event extends Event_base implements Component, Listenable {
    readonly xapi: XAPI;
    prefix: string;
    normalizePath: (path: Path) => Array<string | number>;
    on: <T = any>(path: Path, listener: Listener<T>) => Registration;
    once: <T = any>(path: Path, listener: Listener<T>) => Registration;
    off: () => void;
    constructor(xapi: XAPI);
}
declare const Status_base: any;
export declare class Status extends Status_base implements Component, Listenable, Gettable {
    readonly xapi: XAPI;
    prefix: string;
    normalizePath: (path: Path) => Array<string | number>;
    on: <T = any>(path: Path, listener: Listener<T>) => Registration;
    once: <T = any>(path: Path, listener: Listener<T>) => Registration;
    off: () => void;
    get: <T = any>(path: Path) => Promise<T>;
    constructor(xapi: XAPI);
}
export {};
