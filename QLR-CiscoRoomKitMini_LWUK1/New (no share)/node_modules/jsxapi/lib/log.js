"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var loglevel = __importStar(require("loglevel"));
if (!loglevel.isPatched) {
    var origMethodFactory_1 = loglevel.methodFactory;
    var loggers_1 = new Set();
    Object.assign(loglevel, {
        isPatched: true,
        methodFactory: function (methodName, logLevel, loggerName) {
            if (loggerName) {
                loggers_1.add(loggerName);
            }
            var rawMethod = origMethodFactory_1(methodName, logLevel, loggerName);
            return function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                rawMethod.apply(void 0, __spreadArrays(["[" + (loggerName || 'root') + "]"], args));
            };
        },
        getLoggers: function () {
            return Array.from(loggers_1);
        },
        setGlobalLevel: function (level) {
            var allLoggers = [loglevel].concat(loglevel
                .getLoggers()
                .map(function (name) { return loglevel.getLogger(name); }));
            allLoggers.forEach(function (logger) {
                logger.setLevel(level);
            });
        },
        setLevelTrace: function () {
            loglevel.setGlobalLevel('trace');
        },
        setLevelDebug: function () {
            loglevel.setGlobalLevel('debug');
        },
        setLevelInfo: function () {
            loglevel.setGlobalLevel('info');
        },
        setLevelWarn: function () {
            loglevel.setGlobalLevel('warn');
        },
        setLevelError: function () {
            loglevel.setGlobalLevel('error');
        },
    });
    loglevel.setLevel(loglevel.getLevel());
}
exports.default = loglevel.getLogger('jsxapi');
