#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var commander_1 = __importDefault(require("commander"));
var fs = __importStar(require("fs"));
var REPL = __importStar(require("repl"));
var _1 = require("./");
var log_1 = __importDefault(require("./log"));
var version_1 = __importDefault(require("./version"));
function evalFile(source, xapi) {
    var context = new Function('xapi', source);
    context(xapi);
}
function startRepl(xapi) {
    var repl = REPL.start({});
    repl.on('exit', function () { return xapi.close(); });
    repl.context.xapi = xapi;
}
function main() {
    commander_1.default
        .version(version_1.default)
        .arguments('<host> [file]')
        .description('connect to a codec and launch a repl')
        .option('-p, --port <port>', 'port to connect to', 22)
        .option('-U, --username <user>', 'username to authenticate with', 'admin')
        .option('-P, --password <password>', 'password to authenticate with', '')
        .option('-C, --command <command>', 'command to execute on remote host', '')
        .option('-l, --loglevel <level>', 'set application log level (trace|debug|info|warn|error|silent)', /^(trace|debug|info|warn|error|silent)$/i, 'warn')
        .action(function (host, file, options) {
        if (!host) {
            log_1.default.error('Please specify a host to connect to');
            commander_1.default.help();
        }
        var source = file && fs.readFileSync(file);
        var xapi = _1.connect(host, options)
            .on('error', function (error) {
            log_1.default.error('xapi error:', error);
        })
            .on('ready', function () {
            if (source) {
                evalFile(source, xapi);
            }
            else {
                startRepl(xapi);
            }
        });
    })
        .parse(process.argv);
}
main();
