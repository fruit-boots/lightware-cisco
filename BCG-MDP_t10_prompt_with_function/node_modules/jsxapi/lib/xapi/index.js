"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = require("events");
var log_1 = __importDefault(require("../log"));
var normalizePath_1 = __importDefault(require("./normalizePath"));
var rpc = __importStar(require("./rpc"));
var version_1 = __importDefault(require("../version"));
var components_1 = require("./components");
var feedback_1 = __importDefault(require("./feedback"));
var proxy_1 = __importDefault(require("./proxy"));
var XAPI = (function (_super) {
    __extends(XAPI, _super);
    function XAPI(backend, options) {
        if (options === void 0) { options = { seal: true }; }
        var _this = _super.call(this) || this;
        _this.backend = backend;
        _this.version = version_1.default;
        _this.requestId = 1;
        _this.requests = {};
        _this.feedback = new feedback_1.default(_this, options.feedbackInterceptor);
        _this.config = new components_1.Config(_this);
        _this.event = new components_1.Event(_this);
        _this.status = new components_1.Status(_this);
        _this.Command = proxy_1.default(_this, _this.command);
        _this.Config = proxy_1.default(_this, _this.config);
        _this.Event = proxy_1.default(_this, _this.event);
        _this.Status = proxy_1.default(_this, _this.status);
        if (options.seal) {
            Object.defineProperties(_this, {
                Command: { writable: false },
                Config: { writable: false },
                Event: { writable: false },
                Status: { writable: false },
                config: { writable: false },
                event: { writable: false },
                feedback: { writable: false },
                status: { writable: false },
            });
            Object.seal(_this);
        }
        backend
            .on('close', function () {
            _this.emit('close');
        })
            .on('error', function (error) {
            _this.emit('error', error);
        })
            .on('ready', function () {
            _this.emit('ready', _this);
        })
            .on('data', _this.handleResponse.bind(_this));
        return _this;
    }
    XAPI.prototype.close = function () {
        this.backend.close();
        return this;
    };
    XAPI.prototype.command = function (path, params, body) {
        var apiPath = normalizePath_1.default(path).join('/');
        var method = "xCommand/" + apiPath;
        var executeParams = body === undefined ? params : Object.assign({ body: body }, params);
        return this.execute(method, executeParams);
    };
    XAPI.prototype.execute = function (method, params) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var id = _this.nextRequestId();
            var request = rpc.createRequest(id, method, params);
            _this.backend.execute(request);
            _this.requests[id] = { resolve: resolve, reject: reject };
        });
    };
    XAPI.prototype.handleResponse = function (response) {
        var id = response.id, method = response.method;
        if (method === 'xFeedback/Event') {
            log_1.default.debug('feedback:', response);
            this.feedback.dispatch(response.params);
        }
        else {
            if ({}.hasOwnProperty.call(response, 'result')) {
                log_1.default.debug('result:', response);
                var resolve = this.requests[id].resolve;
                resolve(response.result);
            }
            else {
                log_1.default.debug('error:', response);
                var reject = this.requests[id].reject;
                reject(response.error);
            }
            delete this.requests[id];
        }
    };
    XAPI.prototype.nextRequestId = function () {
        var requestId = this.requestId;
        this.requestId += 1;
        return requestId.toString();
    };
    return XAPI;
}(events_1.EventEmitter));
exports.XAPI = XAPI;
exports.default = XAPI;
