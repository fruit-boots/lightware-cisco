"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Listenable = (function () {
    function Listenable() {
    }
    Listenable.prototype.on = function (path, listener) {
        return this.xapi.feedback.on(this.normalizePath(path), listener);
    };
    Listenable.prototype.once = function (path, listener) {
        return this.xapi.feedback.once(this.normalizePath(path), listener);
    };
    Listenable.prototype.off = function () {
        this.xapi.feedback.off();
    };
    return Listenable;
}());
exports.Listenable = Listenable;
var Gettable = (function () {
    function Gettable() {
    }
    Gettable.prototype.get = function (path) {
        return this.xapi.execute('xGet', {
            Path: this.normalizePath(path),
        });
    };
    return Gettable;
}());
exports.Gettable = Gettable;
var Settable = (function () {
    function Settable() {
    }
    Settable.prototype.set = function (path, value) {
        return this.xapi.execute('xSet', {
            Path: this.normalizePath(path),
            Value: value,
        });
    };
    return Settable;
}());
exports.Settable = Settable;
function mix(Base) {
    var Mixins = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        Mixins[_i - 1] = arguments[_i];
    }
    var Class = (function (_super) {
        __extends(Class, _super);
        function Class() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return Class;
    }(Base));
    Mixins.forEach(function (mixin) {
        Object.getOwnPropertyNames(mixin.prototype)
            .map(function (key) { return [key, mixin.prototype[key]]; })
            .filter(function (_a) {
            var v = _a[1];
            return typeof v === 'function' && v !== 'constructor';
        })
            .forEach(function (_a) {
            var name = _a[0], method = _a[1];
            Class.prototype[name] = method;
        });
    });
    return Class;
}
exports.mix = mix;
